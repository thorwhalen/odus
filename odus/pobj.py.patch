# Patch generated by Pyment v0.3.3

--- a/pobj.py
+++ b/pobj.py
@@ -3,15 +3,17 @@
 
 
 def add_method(obj, method_func, method_name=None, class_name=None):
-    """
-    Dynamically add a method to an object.
+    """Dynamically add a method to an object.
 
-    :param obj: The object to add a method to
-    :param method_func: The function to use as a method. The first argument must be the object itself
-        (usually called self)
-    :param method_name: The desired function name. If None, will take method_func.__name__
-    :param class_name:  The desired class name. If None, will take type(obj).__name__
-    :return: the object, but with the additional method (or a different function for it)
+    Args:
+      obj: The object to add a method to
+      method_func: The function to use as a method. The first argument must be the object itself
+    (usually called self)
+      method_name: The desired function name. If None, will take method_func.__name__ (Default value = None)
+      class_name: The desired class name. If None, will take type(obj).__name__ (Default value = None)
+
+    Returns:
+      the object, but with the additional method (or a different function for it)
 
     >>> class A:
     ...     def __init__(self, x=10):
@@ -62,15 +64,18 @@
 
 
 def inject_method(obj, method_func, method_name=None):
-    """
-    Inject one or several methods to an object.
+    """Inject one or several methods to an object.
     Note that it doesn't work if method_name is a dunder.
     If you want to inject things like __call__, __getitem__, etc., use add_method instead.
-    :param obj: The object to add a method to
-    :param method_func: The function to use as a method. The first argument must be the object itself
-        (usually called self)
-    :param method_name: The desired function name. If None, will take method_func.__name__
-    :return: the object, but with the additional method (or a different function for it)
+
+    Args:
+      obj: The object to add a method to
+      method_func: The function to use as a method. The first argument must be the object itself
+    (usually called self)
+      method_name: The desired function name. If None, will take method_func.__name__ (Default value = None)
+
+    Returns:
+      the object, but with the additional method (or a different function for it)
 
     >>> class A:
     ...     def __init__(self, x=10):
